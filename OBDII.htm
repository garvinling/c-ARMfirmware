<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Users\gling\Downloads\OBDII_Project\OBDII.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Users\gling\Downloads\OBDII_Project\OBDII.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 24]: Last Updated: Tue Apr 16 20:51:58 2013
<BR><P>
<H3>Maximum Stack Usage =        928 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; getSpeed &rArr; toArray &rArr; log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3]">Reset_Handler</a>
 <LI><a href="#[53]">__user_initial_stackheap</a>
 <LI><a href="#[4]">Undef_Handler</a>
 <LI><a href="#[5]">SWI_Handler</a>
 <LI><a href="#[6]">PAbt_Handler</a>
 <LI><a href="#[7]">DAbt_Handler</a>
 <LI><a href="#[8]">IRQ_Handler</a>
 <LI><a href="#[9]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">Undef_Handler</a><BR>
 <LI><a href="#[5]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SWI_Handler</a><BR>
 <LI><a href="#[6]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">PAbt_Handler</a><BR>
 <LI><a href="#[7]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DAbt_Handler</a><BR>
 <LI><a href="#[8]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">IRQ_Handler</a><BR>
 <LI><a href="#[9]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">DAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[9]">FIQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8]">IRQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6]">PAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5]">SWI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4]">Undef_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[c]">__main</a> from __main.o(!!!main) referenced from startup.o(RESET)
 <LI><a href="#[b]">main</a> from main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[d]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[f]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[6b]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[6c]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[14]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[6d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[6f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[70]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[71]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[72]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[73]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[74]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[75]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[76]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[77]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[78]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[79]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[7b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[80]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[18]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[81]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[82]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[83]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[84]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[85]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[86]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[e]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[87]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[11]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[13]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[88]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[15]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[89]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[55]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[17]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[8a]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[19]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[53]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1b]"></a>newline</STRONG> (ARM, 28 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = newline
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaymainMenu
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSelect
</UL>

<P><STRONG><a name="[1d]"></a>toArray</STRONG> (ARM, 120 bytes, Stack size 72 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = toArray &rArr; log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testingLoad
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testingThrottle
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testingRPM
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testingMPH
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intakeAirTemp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMPG
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpgSpeed
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineMAF
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineTiming
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineRPM
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpeed
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getThrottle
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineLoad
</UL>

<P><STRONG><a name="[27]"></a>convertDecimal</STRONG> (ARM, 72 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testingLoad
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testingThrottle
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testingRPM
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testingMPH
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intakeAirTemp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpgSpeed
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineMAF
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineTiming
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineRPM
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpeed
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getThrottle
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineLoad
</UL>

<P><STRONG><a name="[23]"></a>engineLoad</STRONG> (ARM, 720 bytes, Stack size 136 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = engineLoad &rArr; toArray &rArr; log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_puts
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_getkey
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDecimal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>getThrottle</STRONG> (ARM, 712 bytes, Stack size 120 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = getThrottle &rArr; toArray &rArr; log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_puts
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_getkey
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDecimal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>getSpeed</STRONG> (ARM, 744 bytes, Stack size 136 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = getSpeed &rArr; toArray &rArr; log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_puts
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_getkey
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDecimal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>engineRPM</STRONG> (ARM, 740 bytes, Stack size 128 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = engineRPM &rArr; toArray &rArr; log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_puts
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_getkey
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDecimal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>menuSelect</STRONG> (ARM, 540 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = menuSelect &rArr; newline
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newline
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>engineTiming</STRONG> (ARM, 344 bytes, Stack size 120 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = engineTiming &rArr; toArray &rArr; log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_puts
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_getkey
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDecimal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>init</STRONG> (ARM, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>main</STRONG> (ARM, 2004 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = main &rArr; getSpeed &rArr; toArray &rArr; log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_getkey
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineTiming
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSelect
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineRPM
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpeed
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getThrottle
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineLoad
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newline
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[36]"></a>writeBuffer</STRONG> (ARM, 24 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_puts
</UL>

<P><STRONG><a name="[37]"></a>success</STRONG> (ARM, 72 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetBoard
</UL>

<P><STRONG><a name="[38]"></a>resetBoard</STRONG> (ARM, 80 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_puts
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;success
</UL>

<P><STRONG><a name="[39]"></a>engineMAF</STRONG> (ARM, 416 bytes, Stack size 128 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_puts
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_getkey
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDecimal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMPG
</UL>

<P><STRONG><a name="[3a]"></a>mpgSpeed</STRONG> (ARM, 372 bytes, Stack size 136 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_puts
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_getkey
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDecimal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMPG
</UL>

<P><STRONG><a name="[3b]"></a>getMPG</STRONG> (ARM, 452 bytes, Stack size 56 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpgSpeed
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineMAF
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>

<P><STRONG><a name="[3d]"></a>intakeAirTemp</STRONG> (ARM, 332 bytes, Stack size 120 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_puts
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_getkey
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDecimal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>

<P><STRONG><a name="[3e]"></a>failure</STRONG> (ARM, 64 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
</UL>

<P><STRONG><a name="[3f]"></a>purgeBuffer</STRONG> (ARM, 28 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[41]"></a>testingMPH</STRONG> (ARM, 480 bytes, Stack size 112 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDecimal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>

<P><STRONG><a name="[42]"></a>testingRPM</STRONG> (ARM, 464 bytes, Stack size 96 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDecimal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>

<P><STRONG><a name="[43]"></a>testingThrottle</STRONG> (ARM, 480 bytes, Stack size 96 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDecimal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>

<P><STRONG><a name="[44]"></a>testingLoad</STRONG> (ARM, 480 bytes, Stack size 96 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDecimal
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>

<P><STRONG><a name="[45]"></a>displaymainMenu</STRONG> (ARM, 508 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newline
</UL>

<P><STRONG><a name="[25]"></a>delay</STRONG> (ARM, 52 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lcd
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intakeAirTemp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpgSpeed
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetBoard
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineTiming
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpeed
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getThrottle
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineLoad
</UL>

<P><STRONG><a name="[46]"></a>wait_lcd</STRONG> (ARM, 112 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data_write
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>

<P><STRONG><a name="[47]"></a>lcd_command_write</STRONG> (ARM, 208 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lcd
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[4b]"></a>set_lcd_port_output</STRONG> (ARM, 56 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[33]"></a>lcd_clear</STRONG> (ARM, 20 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_clear &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>lcd_gotoxy</STRONG> (ARM, 96 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[49]"></a>lcd_data_write</STRONG> (ARM, 156 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_data_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
</UL>

<P><STRONG><a name="[4a]"></a>lcd_putchar</STRONG> (ARM, 24 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lcd_putchar &rArr; lcd_data_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data_write
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
</UL>

<P><STRONG><a name="[34]"></a>lcd_putstring</STRONG> (ARM, 80 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>lcd_backlight_on</STRONG> (ARM, 40 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>turn_off_lcd_back_light_cb</STRONG> (ARM, 40 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>init_lcd</STRONG> (ARM, 100 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_lcd &rArr; lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_port_output
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>uart1_getkey</STRONG> (ARM, 32 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>uart0_getkey</STRONG> (ARM, 32 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intakeAirTemp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpgSpeed
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineMAF
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineTiming
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineRPM
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpeed
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getThrottle
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineLoad
</UL>

<P><STRONG><a name="[31]"></a>uart0_init</STRONG> (ARM, 44 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[30]"></a>uart1_init</STRONG> (ARM, 32 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[4c]"></a>uart0_putc</STRONG> (ARM, 32 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_puts
</UL>

<P><STRONG><a name="[1c]"></a>uart1_putc</STRONG> (ARM, 32 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testingLoad
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testingThrottle
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intakeAirTemp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMPG
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineTiming
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSelect
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineRPM
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpeed
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getThrottle
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineLoad
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newline
</UL>

<P><STRONG><a name="[24]"></a>uart0_puts</STRONG> (ARM, 40 bytes, Stack size 4 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uart0_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intakeAirTemp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpgSpeed
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineMAF
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetBoard
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBuffer
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineTiming
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineRPM
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpeed
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getThrottle
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineLoad
</UL>

<P><STRONG><a name="[2d]"></a>uart1_puts</STRONG> (ARM, 40 bytes, Stack size 4 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uart1_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displaymainMenu
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failure
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;success
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSelect
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;purgeBuffer
</UL>

<P><STRONG><a name="[4d]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[8d]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testingLoad
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testingThrottle
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineMAF
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getThrottle
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>

<P><STRONG><a name="[8f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__read_errno</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>

<P><STRONG><a name="[51]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log (via Veneer)
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10 (via Veneer)
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_errno_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno (via Veneer)
</UL>

<P><STRONG><a name="[95]"></a>__errno$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__rt_errno_addr$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[98]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[16]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
</UL>

<P><STRONG><a name="[99]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__kernel_poly</STRONG> (ARM, 256 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[9b]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 24 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>log</STRONG> (ARM, 1380 bytes, Stack size 640 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[1f]"></a>log10</STRONG> (ARM, 360 bytes, Stack size 24 bytes, log10.o(i.log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>

<P><STRONG><a name="[20]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>

<P><STRONG><a name="[5c]"></a>_dadd</STRONG> (ARM, 336 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[60]"></a>__fpl_dcheck_NaN1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[64]"></a>__fpl_dcmp_Inf</STRONG> (ARM, 28 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMPG
</UL>

<P><STRONG><a name="[62]"></a>_ddiv</STRONG> (ARM, 600 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_cdcmpeq</STRONG> (ARM, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[63]"></a>_dcmpeq</STRONG> (ARM, 148 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[21]"></a>__aeabi_d2iz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testingMPH
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMPG
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpgSpeed
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpeed
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineLoad
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>

<P><STRONG><a name="[65]"></a>_dfix</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1e]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testingMPH
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMPG
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpgSpeed
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpeed
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineLoad
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toArray
</UL>

<P><STRONG><a name="[9c]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[9d]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testingMPH
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMPG
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpgSpeed
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpeed
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineLoad
</UL>

<P><STRONG><a name="[66]"></a>_dmul</STRONG> (ARM, 372 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[5f]"></a>__fpl_dnaninf</STRONG> (ARM, 192 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[5e]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_drsub</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[67]"></a>_drsb</STRONG> (ARM, 24 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[69]"></a>_dsub</STRONG> (ARM, 576 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[61]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[58]"></a>__ARM_scalbn</STRONG> (ARM, 104 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[6a]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[5d]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[54]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
